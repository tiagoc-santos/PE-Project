library(stats4)
a <- 4.5
n <- 18
obs <- c(8.54,4.76,5.15,4.96,6.25,7.22,12.9,6.04,8.86,4.88,6.54,4.53,4.7,5.38,5.96,5.17,5.09,5.11)
p <- 0.25
fdp <- function(x, theta){
return(theta * x ^(-theta -1) * 4.5^theta)
}
nll <- function(theta){
sum <- 0
for(i in obs){
sum <- sum + log(fdp(i,theta))
}
return(-sum)
}
theta_mle <- mle(nll, start = list(theta = 3.4))
theta <- (theta_mle@coef)
quantil_estimado <- 4.5/(0.75^(1/theta))
theta <- 3.4
quantil_verdadeiro <- (((4.5)^2*theta)/4.5)^(1/theta)
desvio_absoluto <- abs(quantil_estimado - quantil_verdadeiro)
round(desvio_absoluto, 4)
library(stats4)
a <- 4.5
n <- 18
obs <- c(8.54,4.76,5.15,4.96,6.25,7.22,12.9,6.04,8.86,4.88,6.54,4.53,4.7,5.38,5.96,5.17,5.09,5.11)
p <- 0.25
fdp <- function(x, theta){
return(theta * x ^(-theta -1) * 4.5^theta)
}
nll <- function(theta){
sum <- 0
for(i in obs){
sum <- sum + log(fdp(i,theta))
}
return(-sum)
}
theta_mle <- mle(nll, start = list(theta = 3.4))
theta <- (theta_mle@coef)
quantil_estimado <- 4.5/(0.75^(1/theta))
theta <- 3.4
quantil_verdadeiro <- 4.5/(0.75^(1/theta))
desvio_absoluto <- abs(quantil_estimado - quantil_verdadeiro)
round(desvio_absoluto, 4)
library(stats4)
a <- 4.5
n <- 18
obs <- c(8.54,4.76,5.15,4.96,6.25,7.22,12.9,6.04,8.86,4.88,6.54,4.53,4.7,5.38,5.96,5.17,5.09,5.11)
p <- 0.25
fdp <- function(x, theta){
return(theta * x ^(-theta -1) * 4.5^theta)
}
nll <- function(theta){
sum <- 0
for(i in obs){
sum <- sum + log(fdp(i,theta))
}
return(-sum)
}
theta_mle <- mle(nll, start = list(theta = 3.4))
theta <- (theta_mle@coef)
quantil_estimado <- 4.5/(0.75^(1/theta))
theta <- 3.4
quantil_verdadeiro <- 4.5/(0.75^(1/theta))
desvio_absoluto <- abs(quantil_estimado - quantil_verdadeiro)
round(desvio_absoluto, 4)
set.seed(1973)
n <- 40
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated > 126))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(126, 40, rate = 1/4)
difference <- abs(proportion - prob_exata) * 100
round(difference, 4)
help("pgamma")
set.seed(1973)
n <- 40
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated > 126))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(126, 40, rate = 1/4)
difference <- abs(proportion - prob_exata)
round(difference, 4)
set.seed(1973)
n <- 40
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated > 126))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(126, 40, rate = 1/4)
difference <- abs(proportion - prob_exata) * 100
round(difference, 4)
set.seed(1948)
n <- 30
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated >90))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(90, n, rate = 1/4)
difference <- abs(proportion - prob_exata) * 100
round(difference, 4)
set.seed(1973)
n <- 40
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated > 126))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(126, 40, rate = 1/4)
difference <- abs(proportion - prob_exata) * 100
round(difference, 4)
set.seed(1973)
n <- 40
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated > 126))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(126, 40, rate = 1/4)
difference <- abs(proportion - prob_exata) * 100
round(difference, 4)
# # Por exemplo:
# seed <- 1966
# n <- 30
# a <- 2
# valor <- 63
set.seed(seed)
set.seed(1973)
n <- 40
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated > 126))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(126, 40, rate = 1/4)
difference <- abs(proportion - prob_exata) * 100
round(difference, 4)
seed <- 1973
n <- 40
a <- 4
valor <- 126
set.seed(seed)
y <- vector(length = 1000)
for (i in 1:1000) {
y[i] <- sum(rexp(n, rate = 1 / a))
}
sim <- sum(y > valor) / 1000
ext <- 1 - pgamma(valor, n, rate = 1 / a)
solution <- abs(sim - ext) * 100
set.seed(1973)
n <- 40
a <- 4
num_simulations <- 1000
lambda <- 1/a
#Abordagem 1
Y_simulated <- numeric(num_simulations)
for (i in 1:num_simulations) {
samples <- rexp(n, rate = lambda)
Y_simulated[i] <- sum(samples)
}
proportion <- length(subset(Y_simulated, Y_simulated > 126))/ length(Y_simulated)
#Abordagem 2
prob_exata <- 1- pgamma(126, 40, rate = 1/4)
difference <- abs(proportion - prob_exata) * 100
round(difference, 4)
seed <- 1973
n <- 40
a <- 4
valor <- 126
set.seed(seed)
y <- vector(length = 1000)
for (i in 1:1000) {
y[i] <- sum(rexp(n, rate = 1 / a))
}
sim <- sum(y > valor) / 1000
ext <- 1 - pgamma(valor, n, rate = 1 / a)
solution <- abs(sim - ext) * 100
solution
library(stats4)
a <- 4.5
n <- 18
obs <- c(8.54,4.76,5.15,4.96,6.25,7.22,12.9,6.04,8.86,4.88,6.54,4.53,4.7,5.38,5.96,5.17,5.09,5.11)
p <- 0.25
fdp <- function(x, theta){
return(theta * x ^(-theta -1) * 4.5^theta)
}
nll <- function(theta){
sum <- 0
for(i in obs){
sum <- sum + log(fdp(i,theta))
}
return(-sum)
}
theta_mle <- mle(nll, start = list(theta = 3.4))
theta <- (theta_mle@coef)
quantil_estimado <- 4.5/(0.75^(1/theta))
theta <- 3.4
quantil_verdadeiro <- 4.5/(0.75^(1/theta))
desvio_absoluto <- abs(quantil_estimado - quantil_verdadeiro)
round(desvio_absoluto, 4)
# # Por exemplo:
# data <- c(4.98, 4.69, 6.01, 5.78, 7.21, 4.88, 4.28, 5.75, 4.41, 5.8, 4.26, 4.93)
# valor_inicial <- 4.6
# p <- 0.25
# theta <- 4.6
# a <- 4
library(stats4)
soma_logdata <- sum(log(data))
library(stats4)
a <- 4.5
n <- 18
obs <- c(8.54,4.76,5.15,4.96,6.25,7.22,12.9,6.04,8.86,4.88,6.54,4.53,4.7,5.38,5.96,5.17,5.09,5.11)
p <- 0.25
fdp <- function(x, theta){
return(theta * x ^(-theta -1) * 4.5^theta)
}
nll <- function(theta){
sum <- 0
for(i in obs){
sum <- sum + log(fdp(i,theta))
}
return(-sum)
}
theta_mle <- mle(nll, start = list(theta = 3.4))
theta <- (theta_mle@coef)
quantil_estimado <- 4.5/(0.75^(1/theta))
theta <- 3.4
quantil_verdadeiro <- 4.5/(0.75^(1/theta))
desvio_absoluto <- abs(quantil_estimado - quantil_verdadeiro)
round(desvio_absoluto, 4)
data <- c(8.54,4.76,5.15,4.96,6.25,7.22,12.9,6.04,8.86,4.88,6.54,4.53,4.7,5.38,5.96,5.17,5.09,5.11)
valor_inicial <- 3.4
p <- 0.25
theta <- 3.4
a <- 4.5
library(stats4)
soma_logdata <- sum(log(data))
n <- length(data)
fun <- function(theta) {
res <- -n * log(theta) + (theta + 1) * soma_logdata - n * theta * log(a)
return(res)
}
result <- mle(minuslog = fun, start = list(theta = valor_inicial))
est_theta <- as.vector(result@coef)
quantil <- function(p, theta) {
res <- a * (1 - p)^(-1 / theta)
}
estimativa <- quantil(p, est_theta)
valor_exato <- quantil(p, theta)
solution <- abs(estimativa - valor_exato)
solution
set.seed(1950)
n <- 23
r <- 300
m <- 170
generate_T_sample <- function() {
Z <- rnorm(n + 1)
T <- sqrt(n) * (Z[1] / sqrt(sum(Z[-1]^2)))
return(T)
}
proportions <- numeric(r)
for (i in 1:r) {
sample_T <- replicate(m, generate_T_sample())
less_or_equal <- subset(sample_T, sample_T <= 1.5)
proportions[i] <- length(less_or_equal)/length(sample_T)
}
mean_proportion <- mean(proportions)
direct_prob <- pt(1.5, df = n)
difference <- abs(mean_proportion - direct_prob) * 100
result <- round(difference, 5)
result
